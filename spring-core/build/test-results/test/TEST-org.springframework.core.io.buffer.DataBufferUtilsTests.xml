<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="org.springframework.core.io.buffer.DataBufferUtilsTests" tests="246" skipped="0" failures="0" errors="0" timestamp="2020-12-16T17:34:26" hostname="DESKTOP-EMRC5FU" time="0.351">
  <properties/>
  <testcase name="readAsynchronousFileChannelCancel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="readAsynchronousFileChannelError[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.017"/>
  <testcase name="readAndWriteByteChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.003"/>
  <testcase name="readResource[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelErrorInWrite[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.006"/>
  <testcase name="joinCanceled[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="skipUntilByteCountCancelled[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writePath[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.003"/>
  <testcase name="writeAsynchronousFileChannelErrorInWrite[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="SPR16070[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.006"/>
  <testcase name="writeAsynchronousFileChannelErrorInFlux[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readPath[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readInputStream[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readResourcePosition[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAndWriteAsynchronousFileChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="skipUntilByteCountErrorInFlux[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCount[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readResourcePositionAndTakeUntil[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="join[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountCanceled[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="matcher2[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannelCanceled[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelCancel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="matcher[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="skipUntilByteCountShouldSkipAll[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeOutputStream[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="joinErrors[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readByteArrayResourcePositionAndTakeUntil[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="releaseConsumer[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeWritableByteChannelErrorInFlux[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelCancel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelError[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountError[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountExact[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelPosition[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCount[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannelCancelWithoutDemand[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelCancel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannelError[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAndWriteByteChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readResource[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelErrorInWrite[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinCanceled[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCountCancelled[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writePath[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannelErrorInWrite[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.003"/>
  <testcase name="SPR16070[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeAsynchronousFileChannelErrorInFlux[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readPath[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readInputStream[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readResourcePosition[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAndWriteAsynchronousFileChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="skipUntilByteCountErrorInFlux[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeWritableByteChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCount[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readResourcePositionAndTakeUntil[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="join[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountCanceled[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="matcher2[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeAsynchronousFileChannelCanceled[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelCancel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="matcher[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="skipUntilByteCountShouldSkipAll[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeOutputStream[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinErrors[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteArrayResourcePositionAndTakeUntil[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="releaseConsumer[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeWritableByteChannelErrorInFlux[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelCancel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelError[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountError[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="takeUntilByteCountExact[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelPosition[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannel[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCount[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelCancelWithoutDemand[NettyDataBufferFactory (UnpooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannelCancel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannelError[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAndWriteByteChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="readResource[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelErrorInWrite[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinCanceled[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCountCancelled[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writePath[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannelErrorInWrite[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="SPR16070[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeAsynchronousFileChannelErrorInFlux[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readPath[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readInputStream[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readResourcePosition[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAndWriteAsynchronousFileChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCountErrorInFlux[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCount[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="readResourcePositionAndTakeUntil[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="join[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="takeUntilByteCountCanceled[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="matcher2[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeAsynchronousFileChannelCanceled[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelCancel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="matcher[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="skipUntilByteCountShouldSkipAll[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeOutputStream[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinErrors[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readByteArrayResourcePositionAndTakeUntil[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="releaseConsumer[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeWritableByteChannelErrorInFlux[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelCancel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelError[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountError[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="takeUntilByteCountExact[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannelPosition[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeAsynchronousFileChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCount[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannelCancelWithoutDemand[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: true))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.05"/>
  <testcase name="readAsynchronousFileChannelCancel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.031"/>
  <testcase name="readAsynchronousFileChannelError[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAndWriteByteChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="readResource[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelErrorInWrite[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinCanceled[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="skipUntilByteCountCancelled[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writePath[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannelErrorInWrite[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="SPR16070[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannelErrorInFlux[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readPath[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readInputStream[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readResourcePosition[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAndWriteAsynchronousFileChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="skipUntilByteCountErrorInFlux[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeWritableByteChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCount[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readResourcePositionAndTakeUntil[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="join[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountCanceled[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="matcher2[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeAsynchronousFileChannelCanceled[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelCancel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="matcher[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCountShouldSkipAll[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeOutputStream[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinErrors[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteArrayResourcePositionAndTakeUntil[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="releaseConsumer[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelErrorInFlux[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelCancel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readByteChannelError[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountError[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountExact[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelPosition[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannel[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCount[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelCancelWithoutDemand[NettyDataBufferFactory (PooledByteBufAllocator(directByDefault: false))]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.05"/>
  <testcase name="readAsynchronousFileChannelCancel[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannelError[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAndWriteByteChannel[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readResource[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelErrorInWrite[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinCanceled[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannel[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCountCancelled[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writePath[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannelErrorInWrite[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="SPR16070[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannelErrorInFlux[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readPath[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readInputStream[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readResourcePosition[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAndWriteAsynchronousFileChannel[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="skipUntilByteCountErrorInFlux[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeWritableByteChannel[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCount[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readResourcePositionAndTakeUntil[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="join[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="takeUntilByteCountCanceled[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="matcher2[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeAsynchronousFileChannelCanceled[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannel[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelCancel[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="matcher[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="skipUntilByteCountShouldSkipAll[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeOutputStream[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinErrors[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteArrayResourcePositionAndTakeUntil[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="releaseConsumer[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelErrorInFlux[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readByteChannelCancel[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelError[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountError[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="takeUntilByteCountExact[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelPosition[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeAsynchronousFileChannel[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCount[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelCancelWithoutDemand[DefaultDataBufferFactory (preferDirect=true)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannelCancel[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readAsynchronousFileChannelError[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAndWriteByteChannel[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="readResource[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.006"/>
  <testcase name="writeWritableByteChannelErrorInWrite[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinCanceled[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannel[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCountCancelled[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writePath[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannelErrorInWrite[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="SPR16070[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannelErrorInFlux[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readPath[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readInputStream[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readResourcePosition[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAndWriteAsynchronousFileChannel[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.002"/>
  <testcase name="skipUntilByteCountErrorInFlux[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeWritableByteChannel[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="skipUntilByteCount[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readResourcePositionAndTakeUntil[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="join[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountCanceled[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="matcher2[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeAsynchronousFileChannelCanceled[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannel[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeWritableByteChannelCancel[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="matcher[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="skipUntilByteCountShouldSkipAll[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeOutputStream[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="joinErrors[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteArrayResourcePositionAndTakeUntil[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="releaseConsumer[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="writeWritableByteChannelErrorInFlux[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelCancel[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="readByteChannelError[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="takeUntilByteCountError[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCountExact[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelPosition[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="writeAsynchronousFileChannel[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <testcase name="takeUntilByteCount[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.0"/>
  <testcase name="readAsynchronousFileChannelCancelWithoutDemand[DefaultDataBufferFactory (preferDirect=false)]" classname="org.springframework.core.io.buffer.DataBufferUtilsTests" time="0.001"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
